name: Create repo

on:
  issues:
    types: [opened]

jobs:
  parse-issue:
    runs-on: self-hosted
    outputs:
      payload: ${{ steps.parse.outputs.payload }}
    steps:
      - name: Parse issue
        id: parse
        uses: onmax/issue-form-parser@v1.4
        with:
          issue_number: ${{ github.event.issue.number }}

      # Examples on how to use the output
      - name: Show parsed payload data
        env:
          NAME: ${{ fromJson(steps.parse.outputs.payload).Name }}
          DESCRIPTION: ${{ fromJson(steps.parse.outputs.payload).Description }}
          TEAMS: ${{ join(fromJson(steps.parse.outputs.payload).Teams, ',') }}
        run: |
          # Using the character `'` to prevent all characters enclosed within
          # them from being treated as special characters (e.g. $ or `)
          echo '${{ steps.parse.outputs.payload }}'
          echo "NAME: $NAME"
          echo "DESCRIPTION: $DESCRIPTION"
          echo "TEAMS: $TEAMS"
  check-name:
    runs-on: self-hosted
    needs: parse-issue
    if: needs.parse-issue.outputs.payload != '{}'
    steps:
      - name: Check repo name
        env: 
          NAME: ${{ fromJson(needs.parse-issue.outputs.payload).Name }}
          REGEX: ${{ vars.REGEX }}
        run: |
          if [[ -z ${REGEX+x} || $NAME =~ $REGEX ]]; then
            echo "Naming standard satisfied!"
          else
            echo "Does not match naming standard."
            exit 1
          fi
  create-repo:
    runs-on: self-hosted
    needs: [parse-issue, check-name]
    if: needs.parse-issue.outputs.payload != '{}'
    steps:
      - name: Checkout admin repo
        uses: actions/checkout@v2
        with:
          repository: ${{ vars.ORG }}/admin
          token: ${{ secrets.ADMIN_TOKEN }}
          path: admin
      - name: Create new repo setting from template
        uses: bluwy/substitute-string-action@v1
        with:
          _input-file: admin/${{ vars.TEMPLATE }}
          _output-file: admin/.github/repos/${{ fromJson(needs.parse-issue.outputs.payload).Name }}.yml
          _format-key: '%%key%%'
          NAME: ${{ fromJson(needs.parse-issue.outputs.payload).Name }}
          DESCRIPTION: ${{ fromJson(needs.parse-issue.outputs.payload).Description }}
          TEAMS: ${{ join(fromJson(needs.parse-issue.outputs.payload).Teams, ',') }}

      - name: Add teams to repos access config
        env:
          NAME: ${{ fromJson(needs.parse-issue.outputs.payload).Name }}
          TEAMS: ${{ join(fromJson(needs.parse-issue.outputs.payload).Teams, ',') }}
        run: |
          echo Adding $TEAMS to repo access config
          IFS=',' read -r -a array <<< "$TEAMS"

          for team in "${array[@]}"
          do
              echo "Adding $team to repo access config"
              cat <<EOF >> admin/.github/repos/$NAME.yml
            - name: $team
              permission: push
          EOF
          done

      - name: Show the new repo settings
        env:
          NAME: ${{ fromJson(needs.parse-issue.outputs.payload).Name }}
        run: cat admin/.github/repos/$NAME.yml

      - name: Commit and push new repo settings file
        uses: EndBug/add-and-commit@v9
        with:
          add: .github/repos/${{ fromJson(needs.parse-issue.outputs.payload).Name }}.yml
          cwd: ./admin
          default_author: github_actor
          message: Repo settings for ${{ fromJson(needs.parse-issue.outputs.payload).Name }}
          push: true
      - name: Close Issue
        uses: peter-evans/close-issue@v2
        with:
          issue-number: ${{ github.event.issue.number }}
          comment: Auto-closing issue upon successful repo creation
  failure:
    # comment on issue on failure
    needs: check-name
    runs-on: self-hosted
    if: ${{ always() && (needs.check-name.result == 'failure') }}
    steps:
      - name: Comment on issue
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            The repo name does not adhere to the naming standard.